// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SplitwiseCLI;

#nullable disable

namespace SplitwiseCLI.Migrations
{
    [DbContext(typeof(Context))]
    partial class ContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("SplitwiseCLI.Models.Expense", b =>
                {
                    b.Property<int>("expenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("expenseId"));

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<DateTime>("date")
                        .HasColumnType("datetime2");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("expenseId");

                    b.ToTable("expenses");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.ExpenseUsers", b =>
                {
                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.Property<int?>("ExpenseId")
                        .HasColumnType("int");

                    b.HasKey("userId", "ExpenseId");

                    b.HasIndex("ExpenseId");

                    b.ToTable("ExpenseUsers");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.Groups", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GroupId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("expenseId")
                        .HasColumnType("int");

                    b.Property<int?>("userId")
                        .HasColumnType("int");

                    b.HasKey("GroupId");

                    b.HasIndex("expenseId")
                        .IsUnique()
                        .HasFilter("[expenseId] IS NOT NULL");

                    b.HasIndex("userId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.UserExpense", b =>
                {
                    b.Property<int>("UserExpenseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserExpenseId"));

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<double>("amount")
                        .HasColumnType("float");

                    b.Property<string>("currency")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("owedById")
                        .HasColumnType("int");

                    b.Property<int?>("paidById")
                        .HasColumnType("int");

                    b.Property<string>("type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserExpenseId");

                    b.HasIndex("UserId");

                    b.HasIndex("owedById");

                    b.HasIndex("paidById");

                    b.ToTable("userExpenses");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.Users", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("groupesGroupId")
                        .HasColumnType("int");

                    b.Property<string>("phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("userName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.HasIndex("groupesGroupId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.group_admins", b =>
                {
                    b.Property<int?>("User_Id")
                        .HasColumnType("int");

                    b.Property<int?>("group_Id")
                        .HasColumnType("int");

                    b.HasKey("User_Id", "group_Id");

                    b.HasIndex("group_Id");

                    b.ToTable("Group_Admins");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.group_member", b =>
                {
                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.Property<int?>("groupId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "groupId");

                    b.HasIndex("groupId");

                    b.ToTable("Group_Members");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.ExpenseUsers", b =>
                {
                    b.HasOne("SplitwiseCLI.Models.Expense", "expenses")
                        .WithMany("expense_users")
                        .HasForeignKey("ExpenseId")
                        .IsRequired();

                    b.HasOne("SplitwiseCLI.Models.Users", "users")
                        .WithMany("expense_users")
                        .HasForeignKey("userId")
                        .IsRequired();

                    b.Navigation("expenses");

                    b.Navigation("users");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.Groups", b =>
                {
                    b.HasOne("SplitwiseCLI.Models.Expense", "expense")
                        .WithOne("group")
                        .HasForeignKey("SplitwiseCLI.Models.Groups", "expenseId");

                    b.HasOne("SplitwiseCLI.Models.Users", "createdBy")
                        .WithMany("groups")
                        .HasForeignKey("userId");

                    b.Navigation("createdBy");

                    b.Navigation("expense");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.UserExpense", b =>
                {
                    b.HasOne("SplitwiseCLI.Models.Users", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SplitwiseCLI.Models.Expense", "OwedByExpense")
                        .WithMany("owedBy")
                        .HasForeignKey("owedById");

                    b.HasOne("SplitwiseCLI.Models.Expense", "PaidByExpense")
                        .WithMany("paidBy")
                        .HasForeignKey("paidById");

                    b.Navigation("OwedByExpense");

                    b.Navigation("PaidByExpense");

                    b.Navigation("User");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.Users", b =>
                {
                    b.HasOne("SplitwiseCLI.Models.Groups", "groupes")
                        .WithMany()
                        .HasForeignKey("groupesGroupId");

                    b.Navigation("groupes");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.group_admins", b =>
                {
                    b.HasOne("SplitwiseCLI.Models.Users", "admin")
                        .WithMany("group_admins")
                        .HasForeignKey("User_Id")
                        .IsRequired();

                    b.HasOne("SplitwiseCLI.Models.Groups", "group")
                        .WithMany("group_admins")
                        .HasForeignKey("group_Id")
                        .IsRequired();

                    b.Navigation("admin");

                    b.Navigation("group");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.group_member", b =>
                {
                    b.HasOne("SplitwiseCLI.Models.Users", "member")
                        .WithMany("group_member")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SplitwiseCLI.Models.Groups", "group")
                        .WithMany("group_member")
                        .HasForeignKey("groupId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("group");

                    b.Navigation("member");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.Expense", b =>
                {
                    b.Navigation("expense_users");

                    b.Navigation("group");

                    b.Navigation("owedBy");

                    b.Navigation("paidBy");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.Groups", b =>
                {
                    b.Navigation("group_admins");

                    b.Navigation("group_member");
                });

            modelBuilder.Entity("SplitwiseCLI.Models.Users", b =>
                {
                    b.Navigation("expense_users");

                    b.Navigation("group_admins");

                    b.Navigation("group_member");

                    b.Navigation("groups");
                });
#pragma warning restore 612, 618
        }
    }
}
